package my.contacteditor;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.awt.Color;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.WindowConstants;
import org.jdesktop.layout.GroupLayout;
import org.jdesktop.layout.LayoutStyle;

/**
 *
 * @author testes
 */
public class ContactEditorUI extends javax.swing.JFrame {

    /**
     * Creates new form ContactEditorUI
     */
    public ContactEditorUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tipoOrdem = new ButtonGroup();
        jPanel1 = new JPanel();
        jLabel1 = new JLabel();
        cTamVetor = new JTextField();
        jLabel2 = new JLabel();
        cCres = new JRadioButton();
        cDec = new JRadioButton();
        jLabel3 = new JLabel();
        cBolha = new JCheckBox();
        cSelecao = new JCheckBox();
        cInsercao = new JCheckBox();
        cShell = new JCheckBox();
        cHeap = new JCheckBox();
        bComparar = new JButton();
        jScrollPane2 = new JScrollPane();
        cResultado = new JTextArea();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Trabalho BSI3 ");

        jPanel1.setBorder(BorderFactory.createTitledBorder("Comparação"));

        jLabel1.setText("Tamanho do Vetor (entre 10.000 e 50.000) :");

        cTamVetor.setCursor(new Cursor(Cursor.TEXT_CURSOR));
        cTamVetor.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cTamVetorActionPerformed(evt);
            }
        });

        jLabel2.setText("Ordenação: ");

        tipoOrdem.add(cCres);
        cCres.setSelected(true);
        cCres.setText("Crescente");
        cCres.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cCresActionPerformed(evt);
            }
        });

        tipoOrdem.add(cDec);
        cDec.setText("Decrescente");
        cDec.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cDecActionPerformed(evt);
            }
        });

        jLabel3.setText("Metodos para comparação:");

        cBolha.setText("Bolha");
        cBolha.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cBolhaActionPerformed(evt);
            }
        });

        cSelecao.setText("Seleção direta");
        cSelecao.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cSelecaoActionPerformed(evt);
            }
        });

        cInsercao.setText("Inserção Direta");
        cInsercao.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cInsercaoActionPerformed(evt);
            }
        });

        cShell.setText("ShellSort");

        cHeap.setText("HeapSort");
        cHeap.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cHeapActionPerformed(evt);
            }
        });

        bComparar.setText("COMPARAR");
        bComparar.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bCompararActionPerformed(evt);
            }
        });

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(LayoutStyle.RELATED)
                        .add(cTamVetor))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(cShell)
                                .addPreferredGap(LayoutStyle.RELATED)
                                .add(cHeap))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jLabel2)
                                .addPreferredGap(LayoutStyle.UNRELATED)
                                .add(cCres)
                                .addPreferredGap(LayoutStyle.UNRELATED)
                                .add(cDec, GroupLayout.PREFERRED_SIZE, 102, GroupLayout.PREFERRED_SIZE))
                            .add(jLabel3))
                        .add(0, 0, Short.MAX_VALUE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(cBolha)
                        .addPreferredGap(LayoutStyle.RELATED, 15, Short.MAX_VALUE)
                        .add(cSelecao)
                        .add(18, 18, 18)
                        .add(cInsercao)))
                .addContainerGap())
            .add(jPanel1Layout.createSequentialGroup()
                .add(101, 101, 101)
                .add(bComparar)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(cTamVetor, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(cCres)
                    .add(cDec))
                .addPreferredGap(LayoutStyle.UNRELATED)
                .add(jLabel3)
                .addPreferredGap(LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(cBolha)
                    .add(cSelecao)
                    .add(cInsercao))
                .addPreferredGap(LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(cShell)
                    .add(cHeap))
                .add(18, 18, 18)
                .add(bComparar))
        );

        cResultado.setEditable(false);
        cResultado.setBackground(new Color(240, 240, 240));
        cResultado.setColumns(20);
        cResultado.setRows(5);
        jScrollPane2.setViewportView(cResultado);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2, GroupLayout.PREFERRED_SIZE, 308, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(0, 0, Short.MAX_VALUE)
                .add(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(28, 28, 28)
                .add(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jScrollPane2, GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cCresActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cCresActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cCresActionPerformed

    private void cDecActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cDecActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cDecActionPerformed

    private void cSelecaoActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cSelecaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cSelecaoActionPerformed

    private void cInsercaoActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cInsercaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cInsercaoActionPerformed

    private void cHeapActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cHeapActionPerformed

    }//GEN-LAST:event_cHeapActionPerformed

    private void bCompararActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bCompararActionPerformed

        try {
            int tamanhoVetor;
            int naoEntendi; //0 cres 1 decres
            boolean[] metodosParaComparar = {false, false, false, false, false};// 0 bolha 1 sele ...

            tamanhoVetor = Integer.parseInt(cTamVetor.getText());
            if (!Util.validaIntervalo(10000, tamanhoVetor, 50000)) {
                throw new Exception("O valor nao esta entre 10000 e 50000");
            }
            if (cCres.isSelected()) {
                naoEntendi = 0;
            } else {
                naoEntendi = 1;
            }
            metodosParaComparar[0] = cBolha.isSelected();
            metodosParaComparar[1] = cSelecao.isSelected();
            metodosParaComparar[2] = cInsercao.isSelected();
            metodosParaComparar[3] = cShell.isSelected();
            metodosParaComparar[4] = cHeap.isSelected();
            if (!Util.validaMetodosSelecionados(metodosParaComparar)) {
                throw new Exception("Nenhum Metodo Selecionado");
            }

            String resultado = Comparar.realizarComparacao(tamanhoVetor, naoEntendi, metodosParaComparar);
            //Util.mostre(resultado);
            cResultado.setText(resultado);

        } catch (NumberFormatException e1) {
            JOptionPane.showMessageDialog(null, "Valor informado nao é um numero inteiro.");
        } catch (Exception e2) {
            JOptionPane.showMessageDialog(null, e2.getMessage());
        }


    }//GEN-LAST:event_bCompararActionPerformed

    private void cBolhaActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cBolhaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cBolhaActionPerformed

    private void cTamVetorActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cTamVetorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cTamVetorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ContactEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ContactEditorUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton bComparar;
    public JCheckBox cBolha;
    public JRadioButton cCres;
    public JRadioButton cDec;
    public JCheckBox cHeap;
    public JCheckBox cInsercao;
    private JTextArea cResultado;
    public JCheckBox cSelecao;
    public JCheckBox cShell;
    public JTextField cTamVetor;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JPanel jPanel1;
    private JScrollPane jScrollPane2;
    public ButtonGroup tipoOrdem;
    // End of variables declaration//GEN-END:variables
}
